{"id":"node_modules/snabbdom/src/package/modules/eventlisteners.ts","dependencies":[{"name":"D:\\Repo\\Daily-code\\Vue\\snabbdom-demo\\package.json","includedInParent":true,"mtime":1594121776499},{"name":"D:\\Repo\\Daily-code\\Vue\\snabbdom-demo\\node_modules\\snabbdom\\package.json","includedInParent":true,"mtime":1594117033108}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.eventListenersModule = void 0;\r\nfunction invokeHandler(handler, vnode, event) {\r\n    if (typeof handler === 'function') {\r\n        // call function handler\r\n        handler.call(vnode, event, vnode);\r\n    }\r\n    else if (typeof handler === 'object') {\r\n        // call handler with arguments\r\n        if (typeof handler[0] === 'function') {\r\n            // special case for single argument for performance\r\n            if (handler.length === 2) {\r\n                handler[0].call(vnode, handler[1], event, vnode);\r\n            }\r\n            else {\r\n                var args = handler.slice(1);\r\n                args.push(event);\r\n                args.push(vnode);\r\n                handler[0].apply(vnode, args);\r\n            }\r\n        }\r\n        else {\r\n            // call multiple handlers\r\n            for (var i = 0; i < handler.length; i++) {\r\n                invokeHandler(handler[i], vnode, event);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction handleEvent(event, vnode) {\r\n    var name = event.type;\r\n    var on = vnode.data.on;\r\n    // call event handler(s) if exists\r\n    if (on && on[name]) {\r\n        invokeHandler(on[name], vnode, event);\r\n    }\r\n}\r\nfunction createListener() {\r\n    return function handler(event) {\r\n        handleEvent(event, handler.vnode);\r\n    };\r\n}\r\nfunction updateEventListeners(oldVnode, vnode) {\r\n    var oldOn = oldVnode.data.on;\r\n    var oldListener = oldVnode.listener;\r\n    var oldElm = oldVnode.elm;\r\n    var on = vnode && vnode.data.on;\r\n    var elm = (vnode && vnode.elm);\r\n    var name;\r\n    // optimization for reused immutable handlers\r\n    if (oldOn === on) {\r\n        return;\r\n    }\r\n    // remove existing listeners which no longer used\r\n    if (oldOn && oldListener) {\r\n        // if element changed or deleted we remove all existing listeners unconditionally\r\n        if (!on) {\r\n            for (name in oldOn) {\r\n                // remove listener if element was changed or existing listeners removed\r\n                oldElm.removeEventListener(name, oldListener, false);\r\n            }\r\n        }\r\n        else {\r\n            for (name in oldOn) {\r\n                // remove listener if existing listener removed\r\n                if (!on[name]) {\r\n                    oldElm.removeEventListener(name, oldListener, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // add new listeners which has not already attached\r\n    if (on) {\r\n        // reuse existing listener or create new\r\n        var listener = vnode.listener = oldVnode.listener || createListener();\r\n        // update vnode for listener\r\n        listener.vnode = vnode;\r\n        // if element changed or added we add all needed listeners unconditionally\r\n        if (!oldOn) {\r\n            for (name in on) {\r\n                // add listener if element was changed or new listeners added\r\n                elm.addEventListener(name, listener, false);\r\n            }\r\n        }\r\n        else {\r\n            for (name in on) {\r\n                // add listener if new listener added\r\n                if (!oldOn[name]) {\r\n                    elm.addEventListener(name, listener, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.eventListenersModule = {\r\n    create: updateEventListeners,\r\n    update: updateEventListeners,\r\n    destroy: updateEventListeners\r\n};\r\n"},"sourceMaps":{"js":{"version":3,"file":"eventlisteners.js","sourceRoot":"","sources":["node_modules/snabbdom/src/package/modules/eventlisteners.ts"],"names":[],"mappings":"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","sourcesContent":["import { VNode, VNodeData } from '../vnode'\nimport { Module } from './module'\n\nexport type On = {\n  [N in keyof HTMLElementEventMap]?: (ev: HTMLElementEventMap[N]) => void\n} & {\n  [event: string]: EventListener\n}\n\nfunction invokeHandler (handler: any, vnode?: VNode, event?: Event): void {\n  if (typeof handler === 'function') {\n    // call function handler\n    handler.call(vnode, event, vnode)\n  } else if (typeof handler === 'object') {\n    // call handler with arguments\n    if (typeof handler[0] === 'function') {\n      // special case for single argument for performance\n      if (handler.length === 2) {\n        handler[0].call(vnode, handler[1], event, vnode)\n      } else {\n        var args = handler.slice(1)\n        args.push(event)\n        args.push(vnode)\n        handler[0].apply(vnode, args)\n      }\n    } else {\n      // call multiple handlers\n      for (var i = 0; i < handler.length; i++) {\n        invokeHandler(handler[i], vnode, event)\n      }\n    }\n  }\n}\n\nfunction handleEvent (event: Event, vnode: VNode) {\n  var name = event.type\n  var on = (vnode.data as VNodeData).on\n\n  // call event handler(s) if exists\n  if (on && on[name]) {\n    invokeHandler(on[name], vnode, event)\n  }\n}\n\nfunction createListener () {\n  return function handler (event: Event) {\n    handleEvent(event, (handler as any).vnode)\n  }\n}\n\nfunction updateEventListeners (oldVnode: VNode, vnode?: VNode): void {\n  var oldOn = (oldVnode.data as VNodeData).on\n  var oldListener = (oldVnode as any).listener\n  var oldElm: Element = oldVnode.elm as Element\n  var on = vnode && (vnode.data as VNodeData).on\n  var elm: Element = (vnode && vnode.elm) as Element\n  var name: string\n\n  // optimization for reused immutable handlers\n  if (oldOn === on) {\n    return\n  }\n\n  // remove existing listeners which no longer used\n  if (oldOn && oldListener) {\n    // if element changed or deleted we remove all existing listeners unconditionally\n    if (!on) {\n      for (name in oldOn) {\n        // remove listener if element was changed or existing listeners removed\n        oldElm.removeEventListener(name, oldListener, false)\n      }\n    } else {\n      for (name in oldOn) {\n        // remove listener if existing listener removed\n        if (!on[name]) {\n          oldElm.removeEventListener(name, oldListener, false)\n        }\n      }\n    }\n  }\n\n  // add new listeners which has not already attached\n  if (on) {\n    // reuse existing listener or create new\n    var listener = (vnode as any).listener = (oldVnode as any).listener || createListener()\n    // update vnode for listener\n    listener.vnode = vnode\n\n    // if element changed or added we add all needed listeners unconditionally\n    if (!oldOn) {\n      for (name in on) {\n        // add listener if element was changed or new listeners added\n        elm.addEventListener(name, listener, false)\n      }\n    } else {\n      for (name in on) {\n        // add listener if new listener added\n        if (!oldOn[name]) {\n          elm.addEventListener(name, listener, false)\n        }\n      }\n    }\n  }\n}\n\nexport const eventListenersModule: Module = {\n  create: updateEventListeners,\n  update: updateEventListeners,\n  destroy: updateEventListeners\n}\n"]}},"error":null,"hash":"2d92817a52c819910d7ce4d77ec3c1d3","cacheData":{"env":{}}}